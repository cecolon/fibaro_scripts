{"name":"Ventilasjon","type":"virtual_device","properties":{"deviceIcon":0,"currentIcon":"0","log":"","logTemp":"","mainLoop":"fibaro:call(fibaro:getSelfId(), \"pressButton\", \"6\");","ui.lblActiveEvent.value":"Fuktighet bad > gang (12:31:10)","ui.lblMode.value":"Høy","ui.lblPrevEvent.value":"Fuktighet bad > gang (12:31:10)","ui.lblRemaining.value":"","visible":"true","rows":[{"type":"label","elements":[{"id":1,"lua":false,"waitForResponse":false,"caption":"Modus","name":"lblMode","favourite":false,"main":true}]},{"type":"label","elements":[{"id":2,"lua":false,"waitForResponse":false,"caption":"Aktiv hendelse","name":"lblActiveEvent","favourite":true,"main":false}]},{"type":"label","elements":[{"id":3,"lua":false,"waitForResponse":false,"caption":"Gjenværende tid","name":"lblRemaining","favourite":false,"main":false}]},{"type":"label","elements":[{"id":4,"lua":false,"waitForResponse":false,"caption":"Siste hendelse","name":"lblPrevEvent","favourite":false,"main":false}]},{"type":"button","elements":[{"id":5,"lua":true,"waitForResponse":false,"caption":"Av/på","name":"btnToggle","empty":false,"msg":"-- Persistent storage for VDs, heavily inspired from Krikoff's Sonos VD\nlocal persist = { \n  persist_global_var = \"lua_persist\",\n  load = function(this)\n    local persist_table_str = fibaro:getGlobalValue(this.persist_global_var)\n    if string.len(persist_table_str) > 0 and persist_table_str ~= \"NaN\" then\n      local persist_table = json.decode(persist_table_str)\n      if persist_table and type(persist_table) == \"table\" then \n        return persist_table\n      else\n        fibaro:debug(\"Error loading persistent table: \" .. (persistent_table_str or \"(empty)\"))\n      end\n    else\n      fibaro:debug(\"Empty table string, initializing.\")\n      this:init()\n    end\n  end,\n  getId = function(this)\n    return \"id_\" .. fibaro:getSelfId()\n  end,\n  loadLocalTable = function(this)\n    return this:load()[this:getId()]\n  end,\n  commitLocalTable = function(this, commit_table)\n    local persist_table = this:load()\n    persist_table[this:getId()] = commit_table\n    fibaro:setGlobal(this.persist_global_var, json.encode(persist_table))\n  end,\n  set = function(this, set_table)\n      local persist_table = this:loadLocalTable()\n      if persist_table then\n        for key, value in pairs(set_table) do\n          persist_table[key] = value\n        end\n      else \n        persist_table = set_table\n      end;\n      this:commitLocalTable(persist_table)\n    end,\n  get = function(this, get_key)\n      local persist_table = this:loadLocalTable()\n      if persist_table and type(persist_table) == \"table\" then \n        for key, value in pairs(persist_table) do\n          if tostring(key) == tostring(get_key or \"\") then\n            return value\n          end\n        end\n      end;\n      return nil\n    end,\n  clear = function(this, clear_key)\n    local persist_table = this:loadLocalTable()\n    persist_table[clear_key] = nil\n    this:commitLocalTable(persist_table)\n  end,\n  reset = function(this)\n    local persist_table = this:load()\n    local vd_id = \"id_\" .. fibaro:getSelfId()\n    if persist_table[vd_id] then\n      persist_table[vd_id] = nil\n    end\n    fibaro:setGlobal(this.persist_global_var, json.encode(persist_table)) \n  end,\n  init = function(this)\n    fibaro:setGlobal(this.persist_global_var, json.encode({}))\n  end,\n}\n\nlocal fanMode = persist:get(\"fanMode\")\nif fanMode == \"Av\" then\n  persist:set({externalEvent = \"Manuell (på)\"})\nelse\n  persist:set({externalEvent = \"Manuell (av)\"})\nend\n","buttonIcon":0,"favourite":false,"main":true}]},{"type":"button","elements":[{"id":6,"lua":true,"waitForResponse":false,"caption":"Process","name":"btnProcess","empty":false,"msg":"-- Persistent storage for VDs, heavily inspired from Krikoff's Sonos VD\nlocal persist = { \n  persist_global_var = \"lua_persist\",\n  load = function(this)\n    local persist_table_str = fibaro:getGlobalValue(this.persist_global_var)\n    if string.len(persist_table_str) > 0 and persist_table_str ~= \"NaN\" then\n      local persist_table = json.decode(persist_table_str)\n      if persist_table and type(persist_table) == \"table\" then \n        return persist_table\n      else\n        fibaro:debug(\"Error loading persistent table: \" .. (persistent_table_str or \"(empty)\"))\n      end\n    else\n      fibaro:debug(\"Empty table string, initializing.\")\n      this:init()\n    end\n  end,\n  getId = function(this)\n    return \"id_\" .. fibaro:getSelfId()\n  end,\n  loadLocalTable = function(this)\n    return this:load()[this:getId()]\n  end,\n  commitLocalTable = function(this, commit_table)\n    local persist_table = this:load()\n    persist_table[this:getId()] = commit_table\n    fibaro:setGlobal(this.persist_global_var, json.encode(persist_table))\n  end,\n  set = function(this, set_table)\n      local persist_table = this:loadLocalTable()\n      if persist_table then\n        for key, value in pairs(set_table) do\n          persist_table[key] = value\n        end\n      else \n        persist_table = set_table\n      end;\n      this:commitLocalTable(persist_table)\n    end,\n  get = function(this, get_key)\n      local persist_table = this:loadLocalTable()\n      if persist_table and type(persist_table) == \"table\" then \n        for key, value in pairs(persist_table) do\n          if tostring(key) == tostring(get_key or \"\") then\n            return value\n          end\n        end\n      end;\n      return nil\n    end,\n  clear = function(this, clear_key)\n    local persist_table = this:loadLocalTable()\n    persist_table[clear_key] = nil\n    this:commitLocalTable(persist_table)\n  end,\n  reset = function(this)\n    local persist_table = this:load()\n    local vd_id = \"id_\" .. fibaro:getSelfId()\n    if persist_table[vd_id] then\n      persist_table[vd_id] = nil\n    end\n    fibaro:setGlobal(this.persist_global_var, json.encode(persist_table)) \n  end,\n  init = function(this)\n    fibaro:setGlobal(this.persist_global_var, json.encode({}))\n  end,\n}\n\n-- Rule table\nlocal rules = {\n  [\"Inaktiv\"]              = { pri = 1, fan = \"Av\", sustain_sec = 0 },\n  [\"Platetopp på\"]         = { pri = 3, fan = \"Høy\", sustain_sec = 30 },\n  [\"Fuktighet bad høy\"]    = { pri = 3, fan = \"Høy\", sustain_sec = 10*60 },\n  [\"Fuktighet bad > gang\"] = { pri = 2, fan = \"Høy\", sustain_sec = 5*60 },\n  [\"Lys bad på\"]           = { pri = 2, fan = \"Lav\", sustain_sec = 0 },\n  [\"Lys bad lenge på\"]     = { pri = 3, fan = \"Høy\", sustain_sec = 5*60 },\n  [\"Manuell (av)\"]         = { pri = 4, fan = \"Av\", sustain_sec = 30*60 },\n  [\"Manuell (på)\"]         = { pri = 4, fan = \"Høy\", sustain_sec = 30*60 },\n  [\"Tid utløpt\"]           = { pri = 5, fan = \"Av\", sustain_sec = 0 },\n};\n\n-- Load persistent data\nlocal activeEvent = persist:get(\"activeEvent\") or \"Inaktiv\"\nlocal activeEventTs = persist:get(\"activeEventTs\")\nlocal mode = persist:get(\"fanMode\")\n\n-- Logic for detecting events\nrules[\"Inaktiv\"].isTriggered = function()\n  return false\nend\n\nrules[\"Platetopp på\"].isTriggered = function()\n  return tonumber(fibaro:getValue(323, \"power\")) > 2\nend\n\nrules[\"Fuktighet bad høy\"].isTriggered = function()\n  return tonumber(fibaro:getValue(264, \"value\")) >= 60\nend\n\nrules[\"Fuktighet bad > gang\"].isTriggered = function()\n  local calib = 0\n  local threshold = 10\n  local bath_humid = tonumber(fibaro:getValue(264, \"value\"))\n  local hall_humid = tonumber(fibaro:getValue(105, \"value\"))\n  local diff = (bath_humid + calib) - hall_humid\n  return diff >= threshold\nend\n\nrules[\"Lys bad på\"].isTriggered = function()\n  return tonumber(fibaro:getValue(231, \"value\")) > 0\nend\n\nrules[\"Lys bad lenge på\"].isTriggered = function()\n  local state, lastModification = fibaro:get(231, \"value\")\n  return tonumber(state) > 0 and (os.time() - lastModification) >= 600\nend\n\nrules[\"Manuell (av)\"].isTriggered = function()\n  externalEvent = persist:get(\"externalEvent\")\n  if externalEvent == \"Manuell (av)\" then\n    persist:clear(\"externalEvent\")\n    return true\n  else\n    return false\n  end\nend\n\nrules[\"Manuell (på)\"].isTriggered = function()\n  externalEvent = persist:get(\"externalEvent\")\n  if externalEvent == \"Manuell (på)\" then\n    persist:clear(\"externalEvent\")\n    return true\n  else\n    return false\n  end\nend\n\nrules[\"Tid utløpt\"].isTriggered = function()\n  if activeEvent == \"Tid utløpt\" then\n    return false\n  end\n  return os.time() >= activeEventTs + rules[activeEvent].sustain_sec\nend\n\n-- Support functions\nfunction setFanSpeed(speed)\n  fibaro:debug(\"Fan speed: \" .. speed)\n  fibaro:call(fibaro:getSelfId(), \"setProperty\", \"ui.lblMode.value\", speed)\n  persist:set({fanMode = speed})\n  if speed == \"Av\" then\n    fibaro:call(291, \"turnOff\");\n  else\n    fibaro:call(291, \"turnOn\");\n  end\nend\n\nfunction isEventPrioritized(event_candidate)\n  return rules[event_candidate].pri >= rules[activeEvent].pri or os.time() >= activeEventTs + rules[activeEvent].sustain_sec\nend\n\nfunction eventLog(event, ts)\n  return event .. \" (\" .. os.date(\"%H:%M:%S\", ts) .. \")\"\nend\n\n-- Handle events\nfor event_name, event_data in pairs(rules) do\n  if event_data.isTriggered() then\n    ts = os.time()\n    fibaro:call(fibaro:getSelfId(), \"setProperty\", \"ui.lblPrevEvent.value\", eventLog(event_name, ts))\n    if isEventPrioritized(event_name) then\n      activeEvent = event_name\n      activeEventTs = ts\n      setFanSpeed(event_data.fan)\n      fibaro:call(fibaro:getSelfId(), \"setProperty\", \"ui.lblActiveEvent.value\", eventLog(activeEvent, activeEventTs))\n    end\n  end\nend\n\n-- Store persistent data\npersist:set({activeEvent = activeEvent, activeEventTs = activeEventTs})\n\n-- Update UI\nlocal remaining = activeEventTs + rules[activeEvent].sustain_sec - os.time();\nif os.time() > activeEventTs and remaining >= 0 then -- Currently counting down\n  fibaro:call(fibaro:getSelfId(), \"setProperty\", \"ui.lblRemaining.value\", remaining .. \" sekunder\")\nelse\n  fibaro:call(fibaro:getSelfId(), \"setProperty\", \"ui.lblRemaining.value\", \"\")\nend\n","buttonIcon":0,"favourite":false,"main":false}]}]},"actions":{"pressButton":1,"setSlider":2,"setProperty":2}}